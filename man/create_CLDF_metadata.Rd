% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/write.CLDF.R
\name{create_CLDF_metadata}
\alias{create_CLDF_metadata}
\title{Generate a CLDF metadata tree from a list of data frames representing a CLDF Module}
\usage{
create_CLDF_metadata(l)
}
\arguments{
\item{l}{list: the list of data.frames

This function generate a metadata tree according to the following heuristic:

1/ generating metadata for the Module:

\itemize{
  \item if the list has an attribute "CLDF_metadata", the content of
  this attribute is supposed to be a tree of lists expressing the metadata for this object and it
  is aggregated to the returned metadata.
  \item if the outer list has CLDF Module name in its "class" attribute,
  it will be used for determining the Module name.
  \item in last ressort, the names of the list elements (the tables) are matched
  with the default Components of each Module in order to determine the Module name.
  \item if everything fails an error is thrown.
}

2/ generating metadata for the Components:

\itemize{
  \item for each inner table, if it has an attribute "CLDF_metadata", the content of
  this attribute is supposed to be a tree of lists expressing the metadata for this object and it
  is aggregated to the returned metadata.
  \item if it has a CLDF Component name in its "class" attributes,
  it will also be used for generating the correct metadata.
  \item The table names are matched with the Component "alternate" names (ie. lower case and pluralised: entries for EntryTable, etc.)
}}
}
\value{
a tree of list containing the metadata. This tree is ready to be serialized using jsonlite::toJSON.
}
\description{
Metadata are represented as lists of lists. The order of the Component metadata in the "tables"
slot match the order of the data frame in the list.
}
\examples{

# Use the class attribute in order for create_CLDF_metadata to generate the correct metadata :
path <- system.file("exampleData", "tuwariDictionary.lift", package="interlineaR")
dictionary <- read.lift(path, vernacular.languages="tww", simplify=TRUE, get.example = FALSE)
class(dictionary) <- append(class(dictionary), "Dictionary")
meta <- create_CLDF_metadata(dictionary)

# If the list does not contain any class information nor a CLDF_metadata attribute,
# the Module the slot names of the list are matched with the Component alternate names.
path <- system.file("exampleData", "tuwariDictionary.lift", package="interlineaR")
dictionary <- read.lift(path, vernacular.languages="tww", simplify=TRUE, get.example = FALSE)
meta <- create_CLDF_metadata(dictionary)

# The returned list can be edited
meta <- create_CLDF_metadata(dictionary)
meta$tables[[2]]$`dc:conformsTo` <- "http://cldf.clld.org/v1.0/terms.rdf#SenseTable"
#write_CLDF(dictionary, meta=meta)
}
\references{
http://cldf.clld.org https://github.com/cldf/cldf/
}
